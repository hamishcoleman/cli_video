#!/bin/bash

#
# Simple wrapper to allow simple watching of youtube videos
#

#
# TODO
# - store the URL somewhere (or make it easy to regenerate)
# - extract the Id from the URL param and look for a completed file without
#   hitting the internet (ls ~/.youtube/*$ID.*
#


DIR=~/.youtube
mkdir -p $DIR

LOGFILE=~/s/organizer/youtube/youtube.log.$(hostname)

if [ -x ~/tmp/src/youtube-dl/youtube-dl ]; then
	# use the newer version
	DL=~/tmp/src/youtube-dl/youtube-dl
else
	DL=youtube-dl
fi

TEMPLATE="%(title)s-%(id)s.%(ext)s"
BASENAME=$($DL -o $TEMPLATE --get-filename "$1" |head -1 |tr " []%" "_")
# TODO - detect a multi-line response as a playlist and handle it appropriately
S=$?
if [ $S -ne 0 ]; then
	echo ERROR
	exit
fi 
if [ -z "$BASENAME" ]; then
    echo ERROR: null basename
    exit
fi
FILE=$DIR/$BASENAME



# Note this one down
mkdir -p "$(dirname "$LOGFILE")"
echo "$(date --rfc-3339=seconds) $1 $BASENAME" >>"$LOGFILE"

#
if [ -d ~/s/organizer/youtube/annex ]; then
(
    cd ~/s/organizer/youtube/annex
    git annex addurl --relaxed --file "$BASENAME" "$1"
)
fi

#-o "%(stitle)s-%(id)s.%(ext)s"
#	-o $FILE \
#-w -c

$DL \
	--ignore-errors \
	--max-quality=18 \
	--quiet \
	--console-title \
	-o "$FILE" \
	--continue \
	"$1" &

echo "Wait for file ${FILE}.part"
while [ ! -s "${FILE}.part" -a ! -s "${FILE}" ]; do
	sleep 1
done

echo Wait for size
SIZE=$(stat -c %s "${FILE}.part")
# FIXME - should vary size based on percentage or bitstream rate
while [ "$SIZE" -lt 1000000 -a ! -e "${FILE}" ]; do
    sleep 1
    SIZE=$(stat -c %s "${FILE}.part")
done

# Race here between the *.part having the right size and finishing..

mplayer "${FILE}"*

echo "$FILE"
